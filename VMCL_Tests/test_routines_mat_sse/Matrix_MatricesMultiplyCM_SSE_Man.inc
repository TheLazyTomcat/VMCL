Function Matrix_MatricesMultiplyCM_SSE_Man(AutoTest: Boolean = False): Integer;
var
  m2s1,m2s2,m2s3: PVMCLMatrix2CMs;
  m3s1,m3s2,m3s3: PVMCLMatrix3CMs;
  m4s1,m4s2,m4s3: PVMCLMatrix4CMs;
  m2d1,m2d2,m2d3: PVMCLMatrix2CMd;
  m3d1,m3d2,m3d3: PVMCLMatrix3CMd;
  m4d1,m4d2,m4d3: PVMCLMatrix4CMd;
begin
WriteLn;
WriteLn(LineText('MatricesMultiply_SSE (CM) - Manual value checks'));
VMCL_New(m2s1); VMCL_New(m2s2); VMCL_New(m2s3);
VMCL_New(m3s1); VMCL_New(m3s2); VMCL_New(m3s3);
VMCL_New(m4s1); VMCL_New(m4s2); VMCL_New(m4s3);
VMCL_New(m2d1); VMCL_New(m2d2); VMCL_New(m2d3);
VMCL_New(m3d1); VMCL_New(m3d2); VMCL_New(m3d3);
VMCL_New(m4d1); VMCL_New(m4d2); VMCL_New(m4d3);
try
  WriteLn;
  RandomMat(m2s1^); RandomMat(m2s2^);
  WriteLn(MatToStr(m2s1^)); WriteLn; WriteLn(MatToStr(m2s2^));
  WriteLn;
  m2s3^ := MatricesMultiply(m2s1^,m2s2^);
  WriteLn('m2s * m2s @ nSSE:'); WriteLn; WriteLn(MatToStr(m2s3^));
  WriteLn;
  MatricesMultiply_SSE(m2s1^,m2s2^,m2s3^);
  WriteLn('m2s * m2s @ SSE:'); WriteLn; WriteLn(MatToStr(m2s3^));
  WriteLn;
  MatricesMultiply_2CMs_SSEu(m2s1^,m2s2^,m2s3^);
  WriteLn('m2s * m2s @ SSEu:'); WriteLn; WriteLn(MatToStr(m2s3^));
  WriteLn;
  MatricesMultiply_2CMs_SSEa(m2s1^,m2s2^,m2s3^);
  WriteLn('m2s * m2s @ SSEa:'); WriteLn; WriteLn(MatToStr(m2s3^));
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  WriteLn;
  RandomMat(m3s1^); RandomMat(m3s2^);
  WriteLn(MatToStr(m3s1^)); WriteLn; WriteLn(MatToStr(m3s2^));
  WriteLn;
  m3s3^ := MatricesMultiply(m3s1^,m3s2^);
  WriteLn('m3s * m3s @ nSSE:'); WriteLn; WriteLn(MatToStr(m3s3^));
  WriteLn;
  MatricesMultiply_SSE(m3s1^,m3s2^,m3s3^);
  WriteLn('m3s * m3s @ SSE:'); WriteLn; WriteLn(MatToStr(m3s3^));
  WriteLn;
  MatricesMultiply_3CMs_SSEua(m3s1^,m3s2^,m3s3^);
  WriteLn('m3s * m3s @ SSEua:'); WriteLn; WriteLn(MatToStr(m3s3^));
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  WriteLn;
  RandomMat(m4s1^); RandomMat(m4s2^);
  WriteLn(MatToStr(m4s1^)); WriteLn; WriteLn(MatToStr(m4s2^));
  WriteLn;
  m4s3^ := MatricesMultiply(m4s1^,m4s2^);
  WriteLn('m4s * m4s @ nSSE:'); WriteLn; WriteLn(MatToStr(m4s3^));
  WriteLn;
  MatricesMultiply_SSE(m4s1^,m4s2^,m4s3^);
  WriteLn('m4s * m4s @ SSE:'); WriteLn; WriteLn(MatToStr(m4s3^));
  WriteLn;
  MatricesMultiply_4CMs_SSEu(m4s1^,m4s2^,m4s3^);
  WriteLn('m4s * m4s @ SSEu:'); WriteLn; WriteLn(MatToStr(m4s3^));
  WriteLn;
  MatricesMultiply_4CMs_SSEa(m4s1^,m4s2^,m4s3^);
  WriteLn('m4s * m4s @ SSEa:'); WriteLn; WriteLn(MatToStr(m4s3^));
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  WriteLn;
  RandomMat(m2d1^); RandomMat(m2d2^);
  WriteLn(MatToStr(m2d1^)); WriteLn; WriteLn(MatToStr(m2d2^));
  WriteLn;
  m2d3^ := MatricesMultiply(m2d1^,m2d2^);
  WriteLn('m2d * m2d @ nSSE:'); WriteLn; WriteLn(MatToStr(m2d3^));
  WriteLn;
  MatricesMultiply_SSE(m2d1^,m2d2^,m2d3^);
  WriteLn('m2d * m2d @ SSE:'); WriteLn; WriteLn(MatToStr(m2d3^));
  WriteLn;
  MatricesMultiply_2CMd_SSEu(m2d1^,m2d2^,m2d3^);
  WriteLn('m2d * m2d @ SSEu:'); WriteLn; WriteLn(MatToStr(m2d3^));
  WriteLn;
  MatricesMultiply_2CMd_SSEa(m2d1^,m2d2^,m2d3^);
  WriteLn('m2d * m2d @ SSEa:'); WriteLn; WriteLn(MatToStr(m2d3^));
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  WriteLn;
  RandomMat(m3d1^); RandomMat(m3d2^);
  WriteLn(MatToStr(m3d1^)); WriteLn; WriteLn(MatToStr(m3d2^));
  WriteLn;
  m3d3^ := MatricesMultiply(m3d1^,m3d2^);
  WriteLn('m3d * m3d @ nSSE:'); WriteLn; WriteLn(MatToStr(m3d3^));
  WriteLn;
  MatricesMultiply_SSE(m3d1^,m3d2^,m3d3^);
  WriteLn('m3d * m3d @ SSE:'); WriteLn; WriteLn(MatToStr(m3d3^));
  WriteLn;
  MatricesMultiply_3CMd_SSEu(m3d1^,m3d2^,m3d3^);
  WriteLn('m3d * m3d @ SSEu:'); WriteLn; WriteLn(MatToStr(m3d3^));
  WriteLn;
  MatricesMultiply_3CMd_SSEa(m3d1^,m3d2^,m3d3^);
  WriteLn('m3d * m3d @ SSEa:'); WriteLn; WriteLn(MatToStr(m3d3^));
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  WriteLn;
  RandomMat(m4d1^); RandomMat(m4d2^);
  WriteLn(MatToStr(m4d1^)); WriteLn; WriteLn(MatToStr(m4d2^));
  WriteLn;
  m4d3^ := MatricesMultiply(m4d1^,m4d2^);
  WriteLn('m4d * m4d @ nSSE:'); WriteLn; WriteLn(MatToStr(m4d3^));
  WriteLn;
  MatricesMultiply_SSE(m4d1^,m4d2^,m4d3^);
  WriteLn('m4d * m4d @ SSE:'); WriteLn; WriteLn(MatToStr(m4d3^));
  WriteLn;
  MatricesMultiply_4CMd_SSEu(m4d1^,m4d2^,m4d3^);
  WriteLn('m4d * m4d @ SSEu:'); WriteLn; WriteLn(MatToStr(m4d3^));
  WriteLn;
  MatricesMultiply_4CMd_SSEa(m4d1^,m4d2^,m4d3^);
  WriteLn('m4d * m4d @ SSEa:'); WriteLn; WriteLn(MatToStr(m4d3^));
finally
  VMCL_Dispose(m2s1); VMCL_Dispose(m2s2); VMCL_Dispose(m2s3);
  VMCL_Dispose(m3s1); VMCL_Dispose(m3s2); VMCL_Dispose(m3s3);
  VMCL_Dispose(m4s1); VMCL_Dispose(m4s2); VMCL_Dispose(m4s3);
  VMCL_Dispose(m2d1); VMCL_Dispose(m2d2); VMCL_Dispose(m2d3);
  VMCL_Dispose(m3d1); VMCL_Dispose(m3d2); VMCL_Dispose(m3d3);
  VMCL_Dispose(m4d1); VMCL_Dispose(m4d2); VMCL_Dispose(m4d3);
end;
Result := 0;
end;